---
#
# Role used to install a basic Matrix synapse server
# The configuration of the server will be completed later in synapse-extra-config role
#
- name: Add ananace-charts helm repository
  kubernetes.core.helm_repository:
    name: ananace-charts
    repo_url: "https://ananace.gitlab.io/charts"

- name: Is there a new s3 media repo module version?
  shell: |
    current_version=$(kubectl get configmap s3-media-repo-module -o "jsonpath={.data['module_version']}")
    if [ "$current_version" = "{{ matrix.s3_media_repo.module_version }}" ]; then
      echo "no"
    else
      echo "yes"
    fi
  register: new_version

- name: Create temporary folder
  ansible.builtin.tempfile:
    state: directory
    suffix: temp
  register: s3_module_tmp_folder
  when: new_version.stdout == "yes"

- name: Download s3 media repo module
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/matrix-org/synapse-s3-storage-provider/{{ matrix.s3_media_repo.module_version }}/s3_storage_provider.py
    dest: "{{s3_module_tmp_folder.path}}/s3_storage_provider.py"
  when: new_version.stdout == "yes"

- name: Delete config map for s3 media repo module
  shell: "kubectl delete configmap s3-media-repo-module"
  ignore_errors: True
  when: new_version.stdout == "yes"

- name: Create config map for s3 media repo module
  shell: "kubectl create configmap s3-media-repo-module --from-file '{{ s3_module_tmp_folder.path }}/' --from-literal module_version={{ matrix.s3_media_repo.module_version }}"
  when: new_version.stdout == "yes"

- name: matrix-synapse helm chart
  kubernetes.core.helm:
    name: matrix-synapse
    chart_ref: ananace-charts/matrix-synapse
    release_state: "{{ absent_or_present }}"
    release_namespace: default
    release_values:
      synapse:
        strategy:
          type: Recreate
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/path: "/_synapse/metrics"
          prometheus.io/port: "9090"
        extraVolumes:
          - name: s3-media-repo-module
            configMap:
              name: s3-media-repo-module
        extraVolumeMounts:
          - name: s3-media-repo-module
            mountPath: /usr/local/lib/python3.11/site-packages/s3_media_repo_module
        extraCommands:
          - "cp /etc/matrix-synapse/conf.d/* /synapse/config/conf.d/"
          - "pip install boto3" # for s3_storage_provider module
          - "cp /usr/local/lib/python3.11/site-packages/s3_media_repo_module/s3_storage_provider.py /usr/local/lib/python3.11/site-packages/s3_storage_provider.py"
      serverName: "{{ matrix.server_name }}"
      config:
        enableRegistration: "{{ matrix.auto_registration }}"
      postgresql:
        enabled: false
      externalPostgresql:
        host: "{{ matrix.db_host }}"
        port: "{{ matrix.db_port }}"
        database: "{{ matrix.db_instance_name }}"
        username: "{{ matrix.db_user }}"
        existingSecret: postgres-secrets
        existingSecretPasswordKey: synapse-db-password
      ingress:
        className: nginx
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          external-dns.alpha.kubernetes.io/hostname: "{{ matrix.server_name }}"
        tls:
          - hosts:
              - "{{ matrix.server_name }}"
            secretName: "matrix-tls-secret"
      wellknown:
        enabled: true
      extraConfig:
        allow_public_rooms_over_federation: true
        enable_registration_without_verification: false
        registrations_require_3pid:
          - email
        email:
          smtp_host: "{{ matrix.smtp_host }}"
          # FIXME smtp_port set with ansible variable is consider as string and not int
          # smtp_port: "{{ matrix.smtp_port }}"
          smtp_port: 587
          smtp_user: "{{ matrix.smtp_user }}"
          smtp_pass: "{{ matrix.smtp_pass }}"
          notif_from: "{{ matrix.notify_from }}"
    update_repo_cache: yes

- name: wait for the matrix-synapse replicaset to be ready
  shell: 'kubectl get deployments.apps matrix-synapse -o jsonpath="{$.status.conditions}" |jq ''.[] | select(.reason | test("NewReplicaSetAvailable")).message'''
  register: rs_message
  until: rs_message.stdout.find("successfully") != -1
  retries: 30
  delay: 5
  when: absent_or_present=="present"

- name: Wait for the synapse instance to be up and running
  ansible.builtin.uri:
    url: "https://{{ matrix.server_name }}/_matrix/static/"
    method: GET
  register: synapse_ping
  until: synapse_ping.status==200
  retries: 30
  delay: 5
  when: absent_or_present=="present"
